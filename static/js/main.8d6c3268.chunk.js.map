{"version":3,"sources":["Tamagotchi/Background/style.module.css","Tamagotchi/style.module.css","Tamagotchi/Bars/style.module.css","Tamagotchi/PooPile/style.module.css","Tamagotchi/Background/Background.js","Tamagotchi/emojis.js","Tamagotchi/TamagotchiUtils.js","Tamagotchi/Bars/Bars.js","Tamagotchi/PooPile/PooPile.js","Tamagotchi/Tamagotchi.js","serviceWorker.js","index.js"],"names":["module","exports","emptyButton","text","click","noop","buttonsTestId","Background","children","buttonsActions","className","style","tamagotchi","loop","tamagotchi__inner","tamagotchi__shadow","tamagotchi__highlight","screen","crack","crackTop","crackRight","crack__line","crackBottom","crackLeft","screen__inner","buttons","buttonA","buttonB","buttonC","map","buttonClassName","index","button","buttonWrapper","key","buttonText","onClick","data-testid","egg","hatchingChick","chick","rooster","skull","Zzz","poo","getNextState","deathReason","timeTick","Tamagotchi","LIFE_SPAN","state","pooCount","MAX_POO_COUNT","hungryness","tiredness","getDeathReason","isNil","awakeTick","sleepSchedule","includes","random","getNextAwakeTick","pooSchedule","Math","min","HUNGRY_INCREMENT","isSleeping","max","TIRED_INCREMENT","getNextStateAttributes","Bars","stat","value","displayName","PooPile","count","pooPile","range","_","dangerouslySetInnerHTML","__html","emojis","props","start","timeInterval","TICKS_PER_SECOND","interval","setInterval","processTimeStep","cleanPoo","setState","nextState","clearInterval","feed","FOOD_SIZE","awake","goSleep","getImg","isDead","STAGES","dead","tickLimit","emoji","hatching","console","log","getButtons","actions","clean","sleep","hasStarted","hasPoo","generateSchedule","POO_FREQ","SLEEP_FREQ","frequency","framesCount","floor","i","this","deathText","Component","HUNGRY_PERIOD","TIRED_PERIOD","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8d6c3268.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tamagotchi\":\"style_tamagotchi__1Fidb\",\"tamagotchi__inner\":\"style_tamagotchi__inner__FS49L\",\"tamagotchi__shadow\":\"style_tamagotchi__shadow__2B6qF\",\"tamagotchi__highlight\":\"style_tamagotchi__highlight__PQTZf\",\"loop\":\"style_loop__3sa0m\",\"screen\":\"style_screen__1ztdF\",\"screen__inner\":\"style_screen__inner__1KUfC\",\"crack\":\"style_crack__-WCmE\",\"crack__line\":\"style_crack__line__1buCc\",\"crackTop\":\"style_crackTop__IwYEP\",\"crackRight\":\"style_crackRight__TUKoy\",\"crackBottom\":\"style_crackBottom__2kj_F\",\"crackLeft\":\"style_crackLeft__Ir7w3\",\"buttons\":\"style_buttons__20Mi6\",\"button\":\"style_button__35Zmd\",\"buttonB\":\"style_buttonB__1eLeQ\",\"chore-score\":\"style_chore-score__h71YW\",\"is-player-thought\":\"style_is-player-thought__2tQnM\",\"credits\":\"style_credits__3DXFp\",\"buttonWrapper\":\"style_buttonWrapper__24aF3\",\"buttonText\":\"style_buttonText__qWW9Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"emoji\":\"style_emoji__33GV8\",\"screen\":\"style_screen__2W9sE\",\"pooStack\":\"style_pooStack__2xWfO\",\"deathText\":\"style_deathText__3lxKe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"stat\":\"style_stat__1Kf7X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pooPile\":\"style_pooPile__3O0go\"};","import React from \"react\";\nimport style from \"./style.module.css\";\nimport { noop } from \"../../lib\";\n\nconst emptyButton = {\n  text: \"\",\n  click: noop\n};\n\nconst buttonsTestId = [\"buttonA\", \"buttonB\", \"buttonC\"];\n\nconst Background = ({ children, buttonsActions = [] }) => {\n  const getButtons = () => {\n    const buttonsClassNames = [style.buttonA, style.buttonB, style.buttonC];\n\n    return buttonsClassNames.map((buttonClassName, index) => {\n      const button = buttonsActions[index] || emptyButton;\n\n      return (\n        <div className={style.buttonWrapper} key={index}>\n          <div className={style.buttonText}>{button.text}</div>\n          <div\n            className={`${style.button} ${buttonClassName}`}\n            onClick={button.click}\n            data-testid={buttonsTestId[index]}\n          />\n        </div>\n      );\n    });\n  };\n\n  return (\n    <div className={style.tamagotchi}>\n      <div className={style.loop}></div>\n\n      <div className={style.tamagotchi__inner}>\n        <div className={style.tamagotchi__shadow}>\n          <div className={style.tamagotchi__highlight}></div>\n        </div>\n\n        <div className={style.screen}>\n          <div className={`${style.crack} ${style.crackTop}`}></div>\n          <div className={`${style.crack} ${style.crackRight}`}>\n            <div className={style.crack__line}></div>\n          </div>\n          <div className={`${style.crack} ${style.crackBottom}`}></div>\n          <div className={`${style.crack} ${style.crackLeft}`}>\n            <div className={style.crack__line}></div>\n          </div>\n\n          <div className={style.screen__inner}>{children}</div>\n        </div>\n        <div className={style.buttons}>{getButtons()}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Background;\n","export default {\n  egg: \"&#129370;\",\n  hatchingChick: \"&#128035;\",\n  chick: \"&#128037;\",\n  rooster: \"&#128019;\",\n  skull: \"&#9760;&#65039;\",\n  Zzz: \"&#x1F4A4;\",\n  poo: \"&#x1F4A9;\"\n};\n","import Tamagotchi from \"./Tamagotchi\";\nimport { random, isNil } from \"../lib\";\n\nexport const getNextState = tamagotchi => {\n  const deathReason = getDeathReason(tamagotchi);\n\n  if (!isNil(deathReason)) {\n    return { deathReason: deathReason };\n  } else {\n    return getNextStateAttributes(tamagotchi);\n  }\n};\n\nfunction getDeathReason(tamagotchi) {\n  if (tamagotchi.timeTick === Tamagotchi.LIFE_SPAN) {\n    return \"Age\";\n  }\n\n  if (tamagotchi.state.pooCount === Tamagotchi.MAX_POO_COUNT) {\n    return \"Dirtiness\";\n  }\n\n  if (tamagotchi.state.hungryness === 100) {\n    return \"Hungry\";\n  }\n\n  if (tamagotchi.state.tiredness === 100) {\n    return \"Tired\";\n  }\n}\n\nfunction getNextStateAttributes(tamagotchi) {\n  return {\n    awakeTick: getNextAwakeTick(),\n    pooCount: getNextPooCount(),\n    hungryness: getNextHungryness(),\n    tiredness: getNextTiredness()\n  };\n\n  function getNextAwakeTick() {\n    if (\n      /* tamagotchi is set to awake up  at this tick*/\n      tamagotchi.state.awakeTick === tamagotchi.timeTick ||\n      /* tamagotchi has fully charged its  */\n      tamagotchi.state.tiredness === 0\n    ) {\n      return null;\n    }\n\n    if (tamagotchi.sleepSchedule.includes(tamagotchi.timeTick)) {\n      return tamagotchi.timeTick + random(1, 15);\n    }\n\n    return tamagotchi.state.awakeTick;\n  }\n\n  function getNextPooCount() {\n    if (tamagotchi.pooSchedule.includes(tamagotchi.timeTick)) {\n      return tamagotchi.state.pooCount + 1;\n    } else {\n      return tamagotchi.state.pooCount;\n    }\n  }\n\n  function getNextHungryness() {\n    return Math.min(\n      tamagotchi.state.hungryness + Tamagotchi.HUNGRY_INCREMENT,\n      100\n    );\n  }\n\n  function getNextTiredness() {\n    if (tamagotchi.isSleeping) {\n      return Math.max(\n        tamagotchi.state.tiredness - Tamagotchi.TIRED_INCREMENT,\n        0\n      );\n    } else {\n      return Math.min(\n        tamagotchi.state.tiredness + Tamagotchi.TIRED_INCREMENT,\n        100\n      );\n    }\n  }\n}\n","import React from \"react\";\nimport style from \"./style.module.css\";\n\nconst Bars = ({ hungryness, tiredness }) => {\n  return [\n    <div className={style.stat} key={\"hungryBar\"}>\n      <span>Hungry:</span>\n      <progress max=\"100\" value={hungryness} />\n    </div>,\n    <div className={style.stat} key={\"tiredBar\"}>\n      <span>Tired:</span>\n      <progress max=\"100\" value={tiredness} />\n    </div>\n  ];\n};\n\nBars.displayName = \"Bars\";\n\nBars.propTypes = {};\n\nexport default Bars;\n","import React from \"react\";\nimport style from \"./style.module.css\";\nimport emojis from \"../emojis\";\nimport { range } from \"../../lib\";\n\nconst PooPile = ({ count }) => {\n  return (\n    <div className={style.pooPile}>\n      {range(count).map((_, index) => (\n        <div dangerouslySetInnerHTML={{ __html: emojis.poo }} key={index} />\n      ))}\n    </div>\n  );\n};\n\nPooPile.displayName = \"PooPile\";\n\nPooPile.propTypes = {};\n\nexport default PooPile;\n","import React, { Component } from \"react\";\nimport Background from \"./Background\";\nimport style from \"./style.module.css\";\nimport { random, range, isNil } from \"../lib\";\nimport emojis from \"./emojis\";\nimport { getNextState } from \"./TamagotchiUtils\";\nimport Bars from \"./Bars\";\nimport PooPile from \"./PooPile\";\n\nclass Tamagotchi extends Component {\n  static TICKS_PER_SECOND = 2;\n  static MAX_POO_COUNT = 3;\n  static LIFE_SPAN = 180; /* time ticks */\n  static HUNGRY_PERIOD = 30; /* in seconds, how often it has to eat at least once */\n  static HUNGRY_INCREMENT =\n    100 / (Tamagotchi.TICKS_PER_SECOND * Tamagotchi.HUNGRY_PERIOD);\n  static TIRED_PERIOD = 30; /* in seconds, how often it has to sleep at least once */\n  static TIRED_INCREMENT =\n    100 / (Tamagotchi.TICKS_PER_SECOND * Tamagotchi.TIRED_PERIOD);\n  static FOOD_SIZE = 50;\n  static POO_FREQ = 20; /* ticks */\n  static SLEEP_FREQ = 20; /* ticks */\n\n  /*  generates a random schedule of events for specifed frequency */\n  static generateSchedule(frequency) {\n    const framesCount = Math.floor(Tamagotchi.LIFE_SPAN / frequency);\n\n    return range(0, framesCount - 1).map(\n      i => frequency * i + random(0, frequency)\n    );\n  }\n\n  static STAGES = {\n    egg: {\n      emoji: emojis.egg,\n      tickLimit: 0\n    },\n    hatching: {\n      emoji: emojis.hatchingChick,\n      tickLimit: 1\n    },\n    chick: {\n      emoji: emojis.chick,\n      tickLimit: 60\n    },\n    rooster: {\n      emoji: emojis.rooster,\n      tickLimit: 120\n    },\n    dead: {\n      emoji: emojis.skull,\n      tickLimit: Tamagotchi.LIFE_SPAN\n    }\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.pooSchedule = Tamagotchi.generateSchedule(Tamagotchi.POO_FREQ);\n    this.sleepSchedule = Tamagotchi.generateSchedule(Tamagotchi.SLEEP_FREQ);\n    this.timeTick = 0;\n    this.interval = null;\n\n    this.state = {\n      awakeTick: null,\n      pooCount: 0,\n      hungryness: 0,\n      tiredness: 0,\n      deathReason: null\n    };\n  }\n\n  get hasStarted() {\n    return !isNil(this.interval);\n  }\n\n  get isDead() {\n    return this.state.deathReason !== null;\n  }\n\n  get isSleeping() {\n    return this.state.awakeTick !== null;\n  }\n\n  get hasPoo() {\n    return this.state.pooCount > 0;\n  }\n\n  start = () => {\n    const timeInterval = 1000 / Tamagotchi.TICKS_PER_SECOND;\n\n    this.interval = setInterval(this.processTimeStep, timeInterval);\n  };\n\n  cleanPoo = () => {\n    this.setState({\n      pooCount: 0,\n      awakeTick: null\n    });\n  };\n\n  processTimeStep = () => {\n    this.timeTick += 1;\n\n    const nextState = getNextState(this);\n\n    this.setState(nextState);\n\n    if (!isNil(nextState.deathReason)) {\n      clearInterval(this.interval);\n    }\n  };\n\n  feed = () => {\n    this.setState({\n      hungryness: Math.max(this.state.hungryness - Tamagotchi.FOOD_SIZE, 0),\n      awakeTick: null\n    });\n  };\n\n  awake = () => {\n    this.setState({\n      awakeTick: null\n    });\n  };\n\n  goSleep = () => {\n    this.setState({\n      awakeTick: this.timeTick + random(1, 30)\n    });\n  };\n\n  getImg = () => {\n    switch (true) {\n      case this.isDead:\n        return emojis.skull;\n\n      case this.isSleeping:\n        return emojis.Zzz;\n\n      case this.timeTick >= Tamagotchi.STAGES.dead.tickLimit:\n        return Tamagotchi.STAGES.dead.emoji;\n\n      case this.timeTick >= Tamagotchi.STAGES.rooster.tickLimit:\n        return Tamagotchi.STAGES.rooster.emoji;\n\n      case this.timeTick >= Tamagotchi.STAGES.chick.tickLimit:\n        return Tamagotchi.STAGES.chick.emoji;\n\n      case this.timeTick >= Tamagotchi.STAGES.hatching.tickLimit:\n        return Tamagotchi.STAGES.hatching.emoji;\n\n      case this.timeTick >= Tamagotchi.STAGES.egg.tickLimit:\n        return Tamagotchi.STAGES.egg.emoji;\n\n      default:\n        console.log(\"ERROR: Unmapped stage\");\n    }\n  };\n\n  getButtons = () => {\n    const actions = {\n      start: { text: \"start\", click: this.start },\n      feed: { text: \"Feed\", click: this.feed },\n      awake: { text: \"Awake\", click: this.awake },\n      clean: { text: \"Clean\", click: this.cleanPoo },\n      sleep: { text: \"Sleep\", click: this.goSleep }\n    };\n\n    if (!this.hasStarted) {\n      return [null, actions.start, null];\n    }\n\n    if (this.isDead) {\n      return [];\n    }\n\n    return [\n      actions.feed,\n      this.isSleeping ? actions.awake : actions.sleep,\n      this.hasPoo ? actions.clean : null\n    ];\n  };\n\n  render() {\n    return (\n      <div>\n        <Background buttonsActions={this.getButtons()}>\n          <div className={style.screen}>\n            <Bars\n              hungryness={this.state.hungryness}\n              tiredness={this.state.tiredness}\n            />\n            <div\n              className={style.emoji}\n              dangerouslySetInnerHTML={{ __html: this.getImg() }}\n            />\n            {this.hasPoo && <PooPile count={this.state.pooCount} />}\n            {this.isDead && (\n              <div className={style.deathText}>\n                Death cause: {this.state.deathReason}\n              </div>\n            )}\n          </div>\n        </Background>\n      </div>\n    );\n  }\n}\n\nTamagotchi.displayName = \"Tamagotchi\";\n\nTamagotchi.propTypes = {};\n\nexport default Tamagotchi;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Tamagotchi from \"./Tamagotchi\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Tamagotchi />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}